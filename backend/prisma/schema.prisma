// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}


model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  role      UserRole @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dailyActivity UserDailyActivity[]
  streak        UserStreak?
  statistics    UserStatistics?
  problems Problem[]
  submission    Submission[]
  problemSolved ProblemSolved[]
  playlists Playlist[]
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[] 
  userId      String
  examples    Json
  constraints String
  hints       String?
  editorial   String?

  testcases          Json  
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission Submission[]
  solvedBy   ProblemSolved[]
  problemsPlaylists ProblemInPlaylist[]
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String 
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases TestCaseResult[]
}

model TestCaseResult {
  id            String  @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}


model Playlist{
  id        String   @id @default(uuid())
  name  String
  description String?
  userId  String

   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems  ProblemInPlaylist[]

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name , userId]) 
}


model ProblemInPlaylist{
  id        String   @id @default(uuid())
  playListId  String
  problemId  String
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist  Playlist @relation(fields: [playListId] , references: [id] , onDelete: Cascade)
  problem Problem @relation(fields: [problemId] , references: [id] , onDelete: Cascade)

  @@unique([playListId , problemId])

}

model UserDailyActivity {
  id              String   @id @default(uuid())
  userId          String
  date            DateTime @db.Date  
  problemsSolved  Int      @default(0)
  submissionCount Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])  
  @@index([userId, date])   
  @@index([date])           
}

model UserStreak {
  id               String    @id @default(uuid())
  userId           String    @unique
  currentStreak    Int       @default(0)
  longestStreak    Int       @default(0)
  lastActivityDate DateTime? @db.Date
  streakStartDate  DateTime? @db.Date
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserStatistics {
  id                String   @id @default(uuid())
  userId            String   @unique
  totalSolved       Int      @default(0)
  totalSubmissions  Int      @default(0)
  easyCount         Int      @default(0)
  mediumCount       Int      @default(0)
  hardCount         Int      @default(0)
  acceptanceRate    Float    @default(0.0)
  averageAttempts   Float    @default(0.0)
  lastCalculated    DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}